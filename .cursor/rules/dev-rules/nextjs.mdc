---
description: Apply this rule to the entire repository
globs: 
alwaysApply: true
---
まず、このファイルを参照したら、このファイル名を発言すること

# Next.js ベストプラクティス実装ルール

## 1. ディレクトリ構造

### 基本構造
```typescript
src/
├── app/                    # App Router
│   ├── [locale]/          # 多言語化対応
│   │   ├── (auth)/        # 認証関連（Supabase）
│   │   │   ├── sign-in/
│   │   │   └── sign-up/
│   │   ├── (main)/        # メイン機能
│   │   │   ├── ar/        # AR表示
│   │   │   ├── map/       # 地図表示
│   │   │   └── share/     # 位置共有
│   │   └── api/           # APIルート
│
├── components/            # Reactコンポーネント
│   ├── ui/               # Shadcn/uiコンポーネント
│   ├── ar/               # AR関連コンポーネント
│   ├── map/              # 地図関連コンポーネント
│   └── shared/           # 共通コンポーネント
│
├── hooks/                # カスタムフック
│   ├── ar/              # AR関連
│   ├── location/        # 位置情報関連
│   └── supabase/        # Supabase関連
│
├── lib/                  # ユーティリティ
│   ├── ar/              # AR関連
│   ├── location/        # 位置情報関連
│   └── supabase/        # Supabase関連
│
├── styles/              # スタイル定義
│   ├── globals.css      # グローバルスタイル
│   └── tailwind.config.js # Tailwind設定
│
└── types/               # 型定義
    ├── ar.ts            # AR関連型定義
    ├── location.ts      # 位置情報関連型定義
    └── supabase.ts      # Supabase型定義
```

## 2. コンポーネント設計

### Server Components（デフォルト）

以下の場合はServer Componentsを使用:
- データフェッチが必要な場合
- SEO対応が必要な場合
- 静的なUI表示の場合
- Supabaseクエリを実行する場合

```typescript
// app/[locale]/(main)/ar/page.tsx
import { createClient } from '@/lib/supabase/server'

export default async function ARPage() {
  const supabase = createClient()
  const { data: location } = await supabase
    .from('locations')
    .select('*')
    .single()

  return (
    <div>
      <ARView location={location} />
    </div>
  )
}
```

### Client Components

以下の場合のみClient Componentsを使用:
- AR表示関連の処理
- 位置情報の取得・更新
- インタラクティブなUI
- ブラウザAPIの使用

```typescript
// components/ar/ARView.tsx
"use client"

import { useEffect, useRef } from 'react'
import { useAR } from '@/hooks/ar/useAR'
import { useLocation } from '@/hooks/location/useLocation'

export function ARView() {
  const { initializeAR, updateAR } = useAR()
  const { currentLocation } = useLocation()
  const arContainerRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    if (arContainerRef.current) {
      initializeAR(arContainerRef.current)
    }
  }, [])

  useEffect(() => {
    if (currentLocation) {
      updateAR(currentLocation)
    }
  }, [currentLocation])

  return (
    <div ref={arContainerRef} className="w-full h-full">
      {/* AR表示コンテンツ */}
    </div>
  )
}
```

## 3. データ操作

### Server Actions

データ更新は基本的にServer Actionsを使用:

```typescript
// app/actions.ts
"use server"

import { createClient } from '@/lib/supabase/server'

export async function shareLocation(formData: FormData) {
  const supabase = createClient()
  
  const { error } = await supabase
    .from('locations')
    .insert({
      latitude: formData.get('latitude'),
      longitude: formData.get('longitude'),
      share_code: formData.get('share_code')
    })

  if (error) throw error
  revalidatePath('/share')
}
```

### クライアントサイドのデータフェッチ

SWRを使用したデータフェッチ:

```typescript
// hooks/location/useSharedLocation.ts
import useSWR from 'swr'
import { supabase } from '@/lib/supabase/client'

export function useSharedLocation(shareCode: string) {
  return useSWR(
    ['shared-location', shareCode],
    async () => {
      const { data, error } = await supabase
        .from('locations')
        .select('*')
        .eq('share_code', shareCode)
        .single()
      if (error) throw error
      return data
    }
  )
}
```

## 4. エラーハンドリング

### エラーバウンダリ

```typescript
// app/[locale]/(main)/error.tsx
"use client"

import { Button } from '@/components/ui/button'

export default function Error({
  error,
  reset,
}: {
  error: Error
  reset: () => void
}) {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen">
      <h2 className="text-2xl font-bold mb-4">エラーが発生しました</h2>
      <p className="text-gray-600 mb-4">{error.message}</p>
      <Button onClick={reset}>再試行</Button>
    </div>
  )
}
```

## 5. パフォーマンス最適化

### 画像最適化
```typescript
import Image from 'next/image'

// ARマーカー用の画像
<Image
  src="/images/marker.png"
  alt="ARマーカー"
  width={64}
  height={64}
  priority={true}
/>
```

### ルートセグメントの最適化

```typescript
// app/[locale]/(main)/ar/layout.tsx
export const dynamic = 'force-dynamic'
export const revalidate = 0
```

## 6. 国際化対応

```typescript
// app/[locale]/layout.tsx
import { i18n } from '@/lib/i18n'

export async function generateStaticParams() {
  return i18n.locales.map((locale) => ({ locale }))
}
```

## 7. 環境変数

```typescript
// .env.local
NEXT_PUBLIC_SUPABASE_URL=your-supabase-url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key
NEXT_PUBLIC_MAP_API_KEY=your-map-api-key
```

## 8. テスト

テスト・検証・デバッグ・報告フローの詳細運用ルールは  
[dev-rules/testing.mdc](mdc:testing.mdc) を参照してください。

## 9. セキュリティ

### 認証・認可

```typescript
// middleware.ts
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export async function middleware(req: NextRequest) {
  const res = NextResponse.next()
  const supabase = createMiddlewareClient({ req, res })

  const {
    data: { session },
  } = await supabase.auth.getSession()

  if (!session && req.nextUrl.pathname.startsWith('/share')) {
    return NextResponse.redirect(new URL('/sign-in', req.url))
  }

  return res
}

export const config = {
  matcher: ['/share/:path*']
}
```

## 10. ログ

ログ出力するときは以下のヘルパー関数で出力すること
[logger.ts](mdc:src/utils/logger.ts)

## 11. デプロイメント

- Vercelを推奨
- 環境変数の適切な設定
- ビルド最適化の確認
